*create pod from yaml
k create pod -f pod.yaml

*patch pod "myapp" from yaml
k patch pod myapp --patch-file pod.yaml

*kill pod "myapp" immediately
k delete pod myapp --grace-period 0 --force

*get detailed info about pod "myapp"
k describe pod myapp

*get detailed info about all pods
k describe pods

*get summary info about all objects in namespace
k get all

*get describe results, 5 lines around grep match
k describe pods | grep -C 5 name=myapp

*create a pod "hazelcast", using hazelcast image, port 5701, listed labels and env variables.
k run hazelcast --image=hazelcast/hazelcast --restart=Never --port=5701 
  --env="DNS_DOMAIN=cluster" --labels="app=hazelcast,env=prod"

*get logs from pod "hazelcast"
k logs hazelcast

*stream realtime logs from pod "hazelcast"
k logs -f hazelcast

*get logs from previous run of pod "hazelcast" (if it has restarted)
k logs --previous hazelcast

*get logs from container "configurer" of pod "init-container"
k logs init-container -c configurer

*run command "env" on pod "hazelcast"
k exec hazelcast -- env

*opens a shell on pod "hazelcast" with interactive terminal ("it")
k exec -it hazelcast -- /bin/sh

*creates a yaml file (pod2.yaml) for a pod using busybox, which will init with listed command (note "dry-run")
k run mypod --image=busybox -o yaml --dry-run=client --restart=Never
  > pod2.yaml -- /bin/sh -c "while true; do date; sleep 10; done"

*get list of all recent events in "ckad" namespace
k get events -n=ckad

*create configmap "dbconfig", with given literal env pairs
k create configmap db-config --from-literal=db=staging --from-literal=password=1234

*create configmap "dbconfig", with env pairs from config.env
k create configmap db-config --from-env-file=config.env

*create configmap "test", with key equal to file name and value equal to file content
k create configmap test --from-file=password

*create configmap "dbconfig", with env pairs from files in db-config directory
k create configmap db-config --from-file=db-config

*get env variables from pod "configured-pod"
k exec configured-pod -- env

*create generic secret "db-creds", containing literal value "password=1234"
k create secret generic db-creds --from-literal=password=1234

*create generic secret "db-creds", containing values from file "secret.env"
k create secret generic db-creds --from-env-file=secret.env

*create generic secret "db-creds", containing key=key and value=contents of "fakeKey.txt"
k create secret generic db-creds --from-file=key=fakeKey.txt

*create service account "custom", with auto-generated token
k create sa custom

*create ephemeral container using "busybox" image to debug distroless "minmal-pod"
k debug -it minimal-pod --image=busybox

*get pods with label information (useful for troubleshooting deployments/services)
k get pods --show-labels

*get endpoints of service "myservice"
k get endpoints myservice

*get targetPort of service "myapp"
k get svc myapp -o yaml | grep targetPort

*get containerPort of pod "myapp"
k get pod myapp -o yaml | grep containerPort

*get top nodes by resource usage
k top nodes

*get top "frontend" pod by resource usage
k top pod frontend

*add label "region=eu" to pod "labeled-pod.  Raises error if label "region" already exists
k label pod labeled-pod region=eu

*upsert label "region" with value "us" for pod "labeled-pod"
k label pod labeled-pod region=us --overwrite

*delete label "banana" from pod "labeled-pod"
k label pod labeled-pod banana-

*get pods which have label "env=dev"
k get pods -l env=dev

*get pods which have label "env=(dev | prod)"
k get pods -l 'env in (dev, prod)'

*get pods which have label "env=(dev | prod)" AND label "tier=backend"
k get pods -l 'env in (dev, prod)',tier=backend

*add annotation "oncall=123412341" to pod "annotated-pod.  Raises error if annotation "oncall" already exists
k annotate pod annotated-pod oncall=123412341

*upsert annotation "oncall" with value "987654321" for pod "annotated-pod"
k annotate pod annotated-pod oncall=987654321 --overwrite

*delete annotation "oncall" from pod "annotated-pod"
k annotate pod annotated-pod oncall-

*create deployment "my-depl" using nginx image with 3 replicas
k create deployment my-depl --image=nginx --replicas=3

*get rollout history for deployment "my-depl"
k rollout history deploy my-depl

*update deployment "my-depl" by setting image of container "nginx" to "nginx:1.19.2"
k set image deploy my-depl nginx=nginx:1.19.2

*get status of most recent rollout for deployment "my-depl"
k rollout status deploy my-depl

*get details of rollout revision 2 for deployment "my-depl"
k rollout history deployment my-depl --revision=2

*roll back deployment "my-depl" to version 1
k rollout undo deploy my-depl --to-revision=1

*scale deployment "my-depl" to 5 pods
k scale deploy my-depl --replicas=5

*create hpa for deployment "my-depl" with given parameters
k autoscale deploy my-depl --cpu-percent=70 --min=2 --max=8

*create job "counter" which runs nginx container and runs command given
k create job counter --image=nginx -- /bin/bash -c 'counter=0; while [ $counter -lt 3 ]; do echo $((++counter)); sleep 3; done'

*create cronjob "google-ping" which executes curl google.com every 2 minutes using nginx image
k create cj google-ping --image=nginx --schedule='*/2 * * * *' -- /bin/sh -c 'curl google.com'

*create service "nginx-svc" as nodeport, with given port mapping
k create svc nodeport nginx-svc --tcp=80:80 

*create pod "nginx" using image nginx exposing port 80, creates clusterip service automatically
k run nginx --image=nginx --restart=Never --port=80 --expose

*create service for deployment "my-depl" with target-port:port "80:80"
k expose deploy my-depl --target-port=80 --port=80

*create a pod "tmp" and have it execute wget on given IP.  Useful for testing ClusterIP services
k run tmp --image=busybox --restart=Never -- /bin/sh -c 'wget -O- 10.111.210.135'

*exposes the Kubernetes API server on localhost:9999
k proxy --port=9999

*when combined with proxy command, allows communication using ClusterIP service from outside the cluster
curl -L 127.0.0.1:9999/api/v1/namespaces/default/services/nginx/proxy

*contact pod "nginx" through its NodePort service
curl localhost:30943

