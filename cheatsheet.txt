*create pod from yaml
k create pod -f pod.yaml

*patch pod myapp from yaml
k patch pod myapp --patch-file pod.yaml

*kill pod immediately
k delete pod myapp --grace-period 0 --force

*get detailed info about pod myapp
k describe pod myapp

*get detailed info about all pods
k describe pods

*get describe results, 5 lines around grep match
k describe pods | grep -C 5 name=myapp

*create a pod called hazelcast, using hazelcast image, port 5701, listed labels and env variables.
k run hazelcast --image=hazelcast/hazelcast --restart=Never --port=5701 
  --env="DNS_DOMAIN=cluster" --labels="app=hazelcast,env=prod"

*get logs from pod hazelcast
k logs hazelcast

*stream realtime logs from pod hazelcast
k logs -f hazelcast

*get logs from previous run of pod hazelcast (if it has restarted)
k logs --previous hazelcast

*run command "env" on pod hazelcast
k exec hazelcast -- env

*opens a shell on pod hazelcast with interactive terminal ("it")
k exec -it hazelcast -- /bin/sh

*creates a yaml file (pod2.yaml) for a pod using busybox, which will init with listed command (note "dry-run")
k run mypod --image=busybox -o yaml --dry-run=client --restart=Never
  > pod2.yaml -- /bin/sh -c "while true; do date; sleep 10; done"

*get list of all recent events in ckad namespace
k get events -n=ckad

*create configmap named dbconfig, with given literal env pairs
k create configmap db-config --from-literal=db=staging --from-literal=password=1234

*create configmap named dbconfig, with env pairs from config.env
k create configmap db-config --from-env-file=config.env

*create configmap named test, with key equal to file name and value equal to file content
k create configmap test --from-file=password

*create configmap named dbconfig, with env pairs from files in db-config directory
k create configmap db-config --from-file=db-config

*get env variables from pod configured-pod
k exec configured-pod -- env

*create generic secret called db-creds, containing literal value password=1234
k create secret generic db-creds --from-literal=password=1234

*create generic secret called db-creds, containing values from file secret.env
k create secret generic db-creds --from-env-file=secret.env

*create generic secret called db-creds, containing key=key and value=contents of fakeKey.txt
k create secret generic db-creds --from-file=key=fakeKey.txt

*create service account called custom, with auto-generated token
k create sa custom